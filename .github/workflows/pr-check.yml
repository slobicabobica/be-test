
name: Notify Client on Schema Change

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  notify-client:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Fetch the commit before the push started
        id: fetch_initial_commit
        run: |
          base_commit=$(git merge-base origin/main HEAD)
          echo "Initial commit before push: $base_commit"
          echo "base_commit=$base_commit" >> $GITHUB_ENV

      - name: Check if schema.graphqls content has changed across all commits in the push
        id: check_schema_in_push
        run: |
          if git diff ${{ env.base_commit }} HEAD -- cdk/assets/schema.graphqls | grep -q '^[-+]'; then
            echo "schema.graphqls has changed across the series of commits"
            echo "schema_changed=true" >> $GITHUB_ENV
          else
            echo "schema.graphqls has not changed across the series of commits"
            echo "schema_changed=false" >> $GITHUB_ENV
          fi
      - name: Get Branch Name
        run: echo "BE_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV

      - name: Add Pending Label to PR
        if: env.schema_changed == 'true'
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{
              "labels": ["Client Compatibility Check Pending"]
            }' \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels

      - name: Add Success Label to PR
        if: env.schema_changed == 'false'
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -d '{
                 "labels": ["Client Compatibility Check Passed"]
            }' \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/labels
      
      - name: Trigger Client Repo Schema Update
        if: env.schema_changed == 'true'
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.CLIENT_REPO_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository_owner }}/fe-test/dispatches \
            -d '{"event_type": "schema-change", "client_payload": { 
            "branch_name": "${{ env.BE_BRANCH }}",
            "pr_number": "${{ github.event.pull_request.number }}",
            "commit_sha": "${{ github.sha }}"
            }}'
      - name: Set Pending Status on Backend PR
        if: env.schema_changed == 'true' && vars.USE_STATUS_UPDATE == 'true'
        run: |
            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -d  '{
              "state": "pending",
              "context": "Client Compatibility Check",
              "description": "Client compatibility check is running..."
            }' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}

      - name: Set Success Status on Backend PR
        if: env.schema_changed == 'false' && vars.USE_STATUS_UPDATE == 'true'
        run: |
            curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -d  '{
              "state": "success",
              "context": "Client Compatibility Check",
              "description": "Client compatibility check passed."
            }' \
            https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}      
